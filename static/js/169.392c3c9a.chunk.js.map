{"version":3,"file":"static/js/169.392c3c9a.chunk.js","mappings":"oMAmBA,MAAMA,GAAgBC,EAAAA,EAAAA,OAAK,IAAM,gCAC3BC,GAAaD,EAAAA,EAAAA,OAAK,IAAM,gCACxBE,GAAcF,EAAAA,EAAAA,OAAK,IAAM,gCAEhB,SAASG,IAEtB,MAAMC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAExBC,GAAcC,EAAAA,EAAAA,UAEdC,GAAWC,EAAAA,EAAAA,MAEXC,GAAWC,EAAAA,EAAAA,MAoBjB,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAASX,EAAUS,QAEtCG,EAAaC,IAAkBF,EAAAA,EAAAA,UAASX,EAAUY,cAElDE,EAASC,IAAcJ,EAAAA,EAAAA,UAASX,EAAUc,SAqBjD,OAnBAE,EAAAA,EAAAA,YAAU,KACM,IAADC,EAAVjB,IACU,OAAXG,QAAW,IAAXA,GAAoB,QAATc,EAAXd,EAAae,eAAO,IAAAD,GAApBA,EAAsBE,YAAYC,YAAYpB,EAAUc,SAAW,IACnEC,EAAWf,EAAUc,SACvB,GACC,KAEHE,EAAAA,EAAAA,YAAU,KACR,IAAIK,EAAc,GACflB,EAAYe,UACbG,EAA8C,KAA9BlB,EAAYe,QAAQI,OAA8C,gBAA9BnB,EAAYe,QAAQI,MAA0BR,EAAU,IAC9G,MAAMS,EAAY,CAChBd,MAAMA,GAAS,GACfK,QAASO,EACTT,YAAYA,GAAe,GAC3BY,GAAI,eAENnB,GAASoB,EAAAA,EAAAA,IAASF,GAAW,GAC5B,CAACT,EAASL,EAAOG,KACZc,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,EACfC,EAAAA,EAAAA,KAAChC,EAAU,CAACyB,MAAOb,EAAOqB,SAAWC,GAAMrB,EAASqB,EAAEC,OAAOV,UAC7DI,EAAAA,EAAAA,MAAA,WAASO,UAAU,YAAWL,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,KAAGI,UAAU,MAAKL,SAAC,aACnBC,EAAAA,EAAAA,KAAClC,EAAa,CAACmC,SAAUA,IAAMf,EAAWZ,EAAYe,QAAQC,YAAYe,cAAcC,KAAMC,IAAKjC,QAErG0B,EAAAA,EAAAA,KAAC/B,EAAW,CAACwB,MAAOV,EAAakB,SAAWC,GAAMlB,EAAekB,EAAEC,OAAOV,UAC1EO,EAAAA,EAAAA,KAAA,OAAKI,UAAU,6BAA4BL,UACzCF,EAAAA,EAAAA,MAAA,UAAQW,QAnDZC,eAA6BP,GAC3B,IACE,MAAMhC,EAAU,CACdU,QACAG,cACAE,iBAEIT,GAASkC,EAAAA,EAAAA,IAAWxC,KAC1ByC,EAAAA,EAAAA,GAAS,SAAU,qCACnB9B,EAAS,IACTG,EAAe,IACfE,EAAW,IACXR,EAAS,IACX,CAAE,MAAMkC,GACNC,QAAQC,MAAMF,EAChB,CACF,EAmCoCG,KAAK,SAASX,UAAU,0BAAyBL,SAAA,CAAC,UAEhFC,EAAAA,EAAAA,KAAA,OAAKI,UAAU,sBAAqBL,UAClCC,EAAAA,EAAAA,KAAA,OAAKgB,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,MAAM,6BAA4BrB,UAC5FC,EAAAA,EAAAA,KAAA,QAAMqB,SAAS,UAAUC,SAAS,UAAUC,EAAE,4WAA4WJ,KAAK,qBAM3a,C","sources":["pages/NewTodo/NewTodo.jsx"],"sourcesContent":["  // import css files\r\nimport './NewTodo.css'\r\n\r\n// import redux hooks\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\n// import react hooks and components\r\nimport { Suspense, lazy, useEffect, useRef, useState } from 'react'\r\n\r\n// get the data form redux\r\nimport { CreateTodo, draft, SetDraft} from '../../states/slices/TodoListSlice'\r\n\r\n// import components\r\nimport Alerting from '../../components/Alerting/Alerting'\r\n\r\n  // import react router hook\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\n  // import components dynamically\r\nconst EditorToolbar = lazy(() => import('./components/Editor/EditorToolbar'))\r\nconst TitleInput = lazy(() => import('./components/TitleInput/TitleInput'))\r\nconst Attachments = lazy(() => import('./components/Attachments/Attachments'))\r\n\r\nexport default function NewTodo() {\r\n    // get the draft\r\n  const DraftTodo = useSelector(draft)\r\n    // create ref for editor\r\n  const RichTextBox = useRef()\r\n    // declare dispatch\r\n  const dispatch = useDispatch()\r\n    // declare navigate\r\n  const navigate = useNavigate()\r\n    // Create Handler\r\n  async function CreateHandler(e){\r\n    try{\r\n      const NewTodo = {\r\n        title,\r\n        attachments,\r\n        content\r\n      }\r\n      await dispatch(CreateTodo(NewTodo))\r\n      Alerting(\"Server\", \"the to-do is created successfully\")\r\n      setTitle(\"\")\r\n      setAttachments(\"\")\r\n      setContent([])\r\n      navigate('/')\r\n    } catch(err) {\r\n      console.error(err)\r\n    }\r\n  }\r\n    // title todo\r\n  const [title, setTitle] = useState(DraftTodo.title)\r\n    // attachments todo\r\n  const [attachments, setAttachments] = useState(DraftTodo.attachments)\r\n    // content todo\r\n  const [content, setContent] = useState(DraftTodo.content)\r\n    // first load\r\n  useEffect(() => {\r\n    if(DraftTodo){\r\n      RichTextBox?.current?.getEditor().setContents(DraftTodo.content || [])\r\n      setContent(DraftTodo.content)\r\n    }\r\n  }, [])\r\n    // set the draft every change\r\n  useEffect(() => {\r\n    let GoodContent = []\r\n    if(RichTextBox.current)\r\n      GoodContent = !(RichTextBox.current.value === \"\" || RichTextBox.current.value === \"<p><br></p>\")? content : []      \r\n    const DraftData = {\r\n      title:title || \"\",\r\n      content: GoodContent,\r\n      attachments:attachments || \"\",\r\n      id: \"INDEX_DB_ID\"\r\n    }\r\n    dispatch(SetDraft(DraftData))\r\n  }, [content, title, attachments])\r\n  return (<Suspense>\r\n    <TitleInput value={title} onChange={(e) => setTitle(e.target.value)}/>\r\n    <section className=\"col gap10\">\r\n      <p className=\"H4D\">Content</p>\r\n      <EditorToolbar onChange={() => setContent(RichTextBox.current.getEditor().getContents().ops)} ref={RichTextBox}/>\r\n    </section>\r\n    <Attachments value={attachments} onChange={(e) => setAttachments(e.target.value)}/>\r\n    <div className=\"buttonsContainer row gap20\">\r\n      <button onClick={CreateHandler} type=\"button\" className='mainButton center gap20'>\r\n        Create\r\n        <div className='center svgContainer'>\r\n          <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M0.505108 7.31596L5.45038 8.55227L6.6867 13.4976C6.83853 14.1048 7.66798 14.187 7.93596 13.6213L13.936 0.954585C14.2041 0.388468 13.6142 -0.201458 13.0481 0.0667023L0.381407 6.0667C-0.184318 6.33468 -0.102185 7.16413 0.505108 7.31596ZM6.16182 7.35577L2.6357 6.47423L11.9319 2.07078L7.52842 11.367L6.64689 7.84084C6.58718 7.60198 6.40068 7.41548 6.16182 7.35577Z\" fill=\"white\"/>\r\n          </svg>\r\n        </div>\r\n      </button>\r\n    </div>\r\n  </Suspense>)\r\n}"],"names":["EditorToolbar","lazy","TitleInput","Attachments","NewTodo","DraftTodo","useSelector","draft","RichTextBox","useRef","dispatch","useDispatch","navigate","useNavigate","title","setTitle","useState","attachments","setAttachments","content","setContent","useEffect","_RichTextBox$current","current","getEditor","setContents","GoodContent","value","DraftData","id","SetDraft","_jsxs","Suspense","children","_jsx","onChange","e","target","className","getContents","ops","ref","onClick","async","CreateTodo","Alerting","err","console","error","type","width","height","viewBox","fill","xmlns","fillRule","clipRule","d"],"sourceRoot":""}